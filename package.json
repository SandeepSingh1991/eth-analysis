"homepage": "https://sandeepsingh1991.github.io/eth-analysis/",
"scripts": {1. **File:** `src/components/CryptoDashboard.js`
```jsx
import React, { useState, useEffect } from "react";
import { LineChart, Line, XAxis, YAxis, Tooltip, CartesianGrid, ResponsiveContainer } from "recharts";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const CryptoDashboard = () => {
  const [coin, setCoin] = useState("ETHUSDT");
  const [data, setData] = useState([]);
  const [startDate, setStartDate] = useState(new Date("2025-01-01T23:00:00"));
  const [endDate, setEndDate] = useState(new Date());
  const [coins, setCoins] = useState([]);

  useEffect(() => {
    const fetchCoins = async () => {
      const response = await fetch("https://api.binance.com/api/v3/exchangeInfo");
      const result = await response.json();
      const coinList = result.symbols.map((symbol) => symbol.symbol).filter((s) => s.endsWith("USDT"));
      setCoins(coinList);
    };

    fetchCoins();
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=${coin}&interval=15m&startTime=${startDate.getTime()}&endTime=${endDate.getTime()}`);
      const result = await response.json();
      
      const formattedData = result.map((candle) => ({
        timestamp: new Date(candle[0]),
        open: parseFloat(candle[1]),
        high: parseFloat(candle[2]),
        low: parseFloat(candle[3]),
        close: parseFloat(candle[4])
      })).filter(item => {
        const hour = item.timestamp.getHours();
        return hour >= 23 || hour < 8;
      });

      setData(formattedData);
    };

    fetchData();
  }, [coin, startDate, endDate]);

  return (
    <div className="p-5 bg-gray-900 text-white min-h-screen">
      <h1 className="text-3xl font-bold text-center mb-5">Crypto Analysis Dashboard</h1>
      
      <div className="flex justify-center gap-5 mb-5">
        <select className="p-2 text-black" value={coin} onChange={(e) => setCoin(e.target.value)}>
          {coins.map((c) => (
            <option key={c} value={c}>{c}</option>
          ))}
        </select>
        <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} className="p-2 text-black" />
        <DatePicker selected={endDate} onChange={(date) => setEndDate(date)} className="p-2 text-black" />
      </div>
      
      <div className="bg-gray-800 p-5 rounded-xl shadow-xl mb-5">
        <h2 className="text-xl font-semibold mb-3">Price Data</h2>
        <table className="w-full text-left border border-gray-600">
          <thead>
            <tr className="bg-gray-700">
              <th className="p-2 border border-gray-600">Date</th>
              <th className="p-2 border border-gray-600">Open</th>
              <th className="p-2 border border-gray-600">High</th>
              <th className="p-2 border border-gray-600">Low</th>
              <th className="p-2 border border-gray-600">Close</th>
            </tr>
          </thead>
          <tbody>
            {data.map((item, index) => (
              <tr key={index} className="border border-gray-600">
                <td className="p-2">{item.timestamp.toLocaleDateString()}</td>
                <td className="p-2">{item.open}</td>
                <td className="p-2">{item.high}</td>
                <td className="p-2">{item.low}</td>
                <td className="p-2">{item.close}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      
      <div className="bg-gray-800 p-5 rounded-xl shadow-xl">
        <h2 className="text-xl font-semibold mb-3">Price Trend</h2>
        <ResponsiveContainer width="100%" height={400}>
          <LineChart data={data}>
            <XAxis dataKey="timestamp" tickFormatter={(time) => new Date(time).toLocaleDateString()} stroke="#ccc" />
            <YAxis stroke="#ccc" />
            <Tooltip labelFormatter={(label) => new Date(label).toLocaleString()} />
            <CartesianGrid strokeDasharray="3 3" />
            <Line type="monotone" dataKey="high" stroke="#82ca9d" />
            <Line type="monotone" dataKey="low" stroke="#ff7300" />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

export default CryptoDashboard;
```

2. **File:** `src/App.js`
```jsx
import React from "react";
import CryptoDashboard from "./components/CryptoDashboard";

const App = () => {
  return (
    <div>
      <CryptoDashboard />
    </div>
  );
};

export default App;
```

3. **File:** `src/index.js`
```jsx
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import "tailwindcss/tailwind.css";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);
```

### **How to Use:**
1. Clone the repository.
2. Run `npm install` to install dependencies.
3. Run `npm start` to launch the project in development mode.
4. Open `http://localhost:3000` in your browser to view the dashboard.

### **Dependencies to Install:**
```sh
npm install react-datepicker recharts tailwindcss
```

Now, the project supports **all Binance coins dynamically** and ensures **live data updates** from **01 Jan 2025** onward! ðŸš€
  "predeploy": "npm run build",
  "deploy": "gh-pages -d build"
}
